/// <reference types="react" />
import { NodeTypesWrapped, EdgeTypesWrapped, ConnectionLineType, KeyCode, ReactFlowProps, Viewport, CoordinateExtent, NodeOrigin } from '../../types';
export interface GraphViewProps extends Omit<ReactFlowProps, 'onSelectionChange' | 'nodes' | 'edges' | 'nodeTypes' | 'edgeTypes'> {
    nodeTypes: NodeTypesWrapped;
    edgeTypes: EdgeTypesWrapped;
    selectionKeyCode: KeyCode | null;
    deleteKeyCode: KeyCode | null;
    multiSelectionKeyCode: KeyCode | null;
    connectionLineType: ConnectionLineType;
    onlyRenderVisibleElements: boolean;
    translateExtent: CoordinateExtent;
    minZoom: number;
    maxZoom: number;
    defaultMarkerColor: string;
    selectNodesOnDrag: boolean;
    noDragClassName: string;
    noWheelClassName: string;
    noPanClassName: string;
    defaultViewport: Viewport;
    rfId: string;
    disableKeyboardA11y: boolean;
    nodeOrigin: NodeOrigin;
}
declare const _default: import("react").MemoExoticComponent<{
    ({ nodeTypes, edgeTypes, onMove, onMoveStart, onMoveEnd, onInit, onNodeClick, onEdgeClick, onNodeDoubleClick, onEdgeDoubleClick, onNodeMouseEnter, onNodeMouseMove, onNodeMouseLeave, onNodeContextMenu, onSelectionContextMenu, connectionLineType, connectionLineStyle, connectionLineComponent, connectionLineContainerStyle, selectionKeyCode, multiSelectionKeyCode, zoomActivationKeyCode, deleteKeyCode, onlyRenderVisibleElements, elementsSelectable, selectNodesOnDrag, defaultViewport, translateExtent, minZoom, maxZoom, preventScrolling, defaultMarkerColor, zoomOnScroll, zoomOnPinch, panOnScroll, panOnScrollSpeed, panOnScrollMode, zoomOnDoubleClick, panOnDrag, onPaneClick, onPaneMouseEnter, onPaneMouseMove, onPaneMouseLeave, onPaneScroll, onPaneContextMenu, onEdgeUpdate, onEdgeContextMenu, onEdgeMouseEnter, onEdgeMouseMove, onEdgeMouseLeave, edgeUpdaterRadius, onEdgeUpdateStart, onEdgeUpdateEnd, noDragClassName, noWheelClassName, noPanClassName, elevateEdgesOnSelect, disableKeyboardA11y, nodeOrigin, nodeExtent, rfId, }: GraphViewProps): JSX.Element;
    displayName: string;
}>;
export default _default;
//# sourceMappingURL=index.d.ts.map