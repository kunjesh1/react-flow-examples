{"ast":null,"code":"var _jsxFileName = \"/Users/kunjeshkumar/Downloads/workflow-builder-example/src/App.tsx\",\n  _s = $RefreshSig$();\n/**\n * This example shows how you can use custom nodes and edges to dynamically add elements to your react flow graph.\n * A global layouting function calculates the new positions for the nodes every time the graph changes and animates existing nodes to their new position.\n *\n * There are three ways of adding nodes to the graph:\n *  1. Click an existing node: Create a new child node of the clicked node\n *  2. Click on the plus icon of an existing edge: Create a node in between the connected nodes of the edge\n *  3. Click a placeholder node: Turn the placeholder into a \"real\" node to prevent jumping of the layout\n *\n * The graph elements are added via hook calls in the custom nodes and edges. The layout is calculated every time the graph changes (see hooks/useLayout.ts).\n **/\nimport React from 'react';\nimport ReactFlow, { Background, ReactFlowProvider } from 'reactflow';\nimport useLayout from './hooks/useLayout';\nimport nodeTypes from './NodeTypes';\nimport edgeTypes from './EdgeTypes';\nimport 'reactflow/dist/style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst proOptions = {\n  account: 'paid-pro',\n  hideAttribution: true\n};\n\n// initial setup: one workflow node and a placeholder node\n// placeholder nodes can be turned into a workflow node by click\nconst defaultNodes = [{\n  id: '1',\n  data: {\n    label: 'ðŸŒ® Taco'\n  },\n  position: {\n    x: 0,\n    y: 0\n  },\n  type: 'workflow'\n}, {\n  id: '2',\n  data: {\n    label: '+'\n  },\n  position: {\n    x: 0,\n    y: 150\n  },\n  type: 'placeholder'\n}];\n\n// initial setup: connect the workflow node to the placeholder node with a placeholder edge\nconst defaultEdges = [{\n  id: '1=>2',\n  source: '1',\n  target: '2',\n  type: 'placeholder'\n}];\nconst fitViewOptions = {\n  padding: 0.95\n};\nfunction ReactFlowPro() {\n  _s();\n  // this hook call ensures that the layout is re-calculated every time the graph changes\n  useLayout();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n      defaultNodes: defaultNodes,\n      defaultEdges: defaultEdges,\n      proOptions: proOptions,\n      fitView: true,\n      nodeTypes: nodeTypes,\n      edgeTypes: edgeTypes,\n      fitViewOptions: fitViewOptions,\n      minZoom: 0.2,\n      nodesDraggable: false,\n      nodesConnectable: false,\n      zoomOnDoubleClick: false,\n      children: /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(ReactFlowPro, \"SCPG6EmKybXx2eVCd7dgQHuXY1M=\", false, function () {\n  return [useLayout];\n});\n_c = ReactFlowPro;\nfunction ReactFlowWrapper() {\n  return /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n    children: /*#__PURE__*/_jsxDEV(ReactFlowPro, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n_c2 = ReactFlowWrapper;\nexport default ReactFlowWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"ReactFlowPro\");\n$RefreshReg$(_c2, \"ReactFlowWrapper\");","map":{"version":3,"names":["React","ReactFlow","Background","ReactFlowProvider","useLayout","nodeTypes","edgeTypes","proOptions","account","hideAttribution","defaultNodes","id","data","label","position","x","y","type","defaultEdges","source","target","fitViewOptions","padding","ReactFlowPro","ReactFlowWrapper"],"sources":["/Users/kunjeshkumar/Downloads/workflow-builder-example/src/App.tsx"],"sourcesContent":["/**\n * This example shows how you can use custom nodes and edges to dynamically add elements to your react flow graph.\n * A global layouting function calculates the new positions for the nodes every time the graph changes and animates existing nodes to their new position.\n *\n * There are three ways of adding nodes to the graph:\n *  1. Click an existing node: Create a new child node of the clicked node\n *  2. Click on the plus icon of an existing edge: Create a node in between the connected nodes of the edge\n *  3. Click a placeholder node: Turn the placeholder into a \"real\" node to prevent jumping of the layout\n *\n * The graph elements are added via hook calls in the custom nodes and edges. The layout is calculated every time the graph changes (see hooks/useLayout.ts).\n **/\nimport React from 'react';\nimport ReactFlow, { Background, Edge, Node, ProOptions, ReactFlowProvider } from 'reactflow';\n\nimport useLayout from './hooks/useLayout';\nimport nodeTypes from './NodeTypes';\nimport edgeTypes from './EdgeTypes';\n\nimport 'reactflow/dist/style.css';\n\nconst proOptions: ProOptions = { account: 'paid-pro', hideAttribution: true };\n\n// initial setup: one workflow node and a placeholder node\n// placeholder nodes can be turned into a workflow node by click\nconst defaultNodes: Node[] = [\n  {\n    id: '1',\n    data: { label: 'ðŸŒ® Taco' },\n    position: { x: 0, y: 0 },\n    type: 'workflow',\n  },\n  {\n    id: '2',\n    data: { label: '+' },\n    position: { x: 0, y: 150 },\n    type: 'placeholder',\n  },\n];\n\n// initial setup: connect the workflow node to the placeholder node with a placeholder edge\nconst defaultEdges: Edge[] = [\n  {\n    id: '1=>2',\n    source: '1',\n    target: '2',\n    type: 'placeholder',\n  },\n];\n\nconst fitViewOptions = {\n  padding: 0.95,\n};\n\nfunction ReactFlowPro() {\n  // this hook call ensures that the layout is re-calculated every time the graph changes\n  useLayout();\n\n  return (\n    <>\n      <ReactFlow\n        defaultNodes={defaultNodes}\n        defaultEdges={defaultEdges}\n        proOptions={proOptions}\n        fitView\n        nodeTypes={nodeTypes}\n        edgeTypes={edgeTypes}\n        fitViewOptions={fitViewOptions}\n        minZoom={0.2}\n        nodesDraggable={false}\n        nodesConnectable={false}\n        zoomOnDoubleClick={false}\n      >\n        <Background />\n      </ReactFlow>\n    </>\n  );\n}\n\nfunction ReactFlowWrapper() {\n  return (\n    <ReactFlowProvider>\n      <ReactFlowPro />\n    </ReactFlowProvider>\n  );\n}\n\nexport default ReactFlowWrapper;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,IAAIC,UAAU,EAA0BC,iBAAiB,QAAQ,WAAW;AAE5F,OAAOC,SAAS,MAAM,mBAAmB;AACzC,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,SAAS,MAAM,aAAa;AAEnC,OAAO,0BAA0B;AAAC;AAAA;AAElC,MAAMC,UAAsB,GAAG;EAAEC,OAAO,EAAE,UAAU;EAAEC,eAAe,EAAE;AAAK,CAAC;;AAE7E;AACA;AACA,MAAMC,YAAoB,GAAG,CAC3B;EACEC,EAAE,EAAE,GAAG;EACPC,IAAI,EAAE;IAAEC,KAAK,EAAE;EAAU,CAAC;EAC1BC,QAAQ,EAAE;IAAEC,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAE,CAAC;EACxBC,IAAI,EAAE;AACR,CAAC,EACD;EACEN,EAAE,EAAE,GAAG;EACPC,IAAI,EAAE;IAAEC,KAAK,EAAE;EAAI,CAAC;EACpBC,QAAQ,EAAE;IAAEC,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAI,CAAC;EAC1BC,IAAI,EAAE;AACR,CAAC,CACF;;AAED;AACA,MAAMC,YAAoB,GAAG,CAC3B;EACEP,EAAE,EAAE,MAAM;EACVQ,MAAM,EAAE,GAAG;EACXC,MAAM,EAAE,GAAG;EACXH,IAAI,EAAE;AACR,CAAC,CACF;AAED,MAAMI,cAAc,GAAG;EACrBC,OAAO,EAAE;AACX,CAAC;AAED,SAASC,YAAY,GAAG;EAAA;EACtB;EACAnB,SAAS,EAAE;EAEX,oBACE;IAAA,uBACE,QAAC,SAAS;MACR,YAAY,EAAEM,YAAa;MAC3B,YAAY,EAAEQ,YAAa;MAC3B,UAAU,EAAEX,UAAW;MACvB,OAAO;MACP,SAAS,EAAEF,SAAU;MACrB,SAAS,EAAEC,SAAU;MACrB,cAAc,EAAEe,cAAe;MAC/B,OAAO,EAAE,GAAI;MACb,cAAc,EAAE,KAAM;MACtB,gBAAgB,EAAE,KAAM;MACxB,iBAAiB,EAAE,KAAM;MAAA,uBAEzB,QAAC,UAAU;QAAA;QAAA;QAAA;MAAA;IAAG;MAAA;MAAA;MAAA;IAAA;EACJ,iBACX;AAEP;AAAC,GAvBQE,YAAY;EAAA,QAEnBnB,SAAS;AAAA;AAAA,KAFFmB,YAAY;AAyBrB,SAASC,gBAAgB,GAAG;EAC1B,oBACE,QAAC,iBAAiB;IAAA,uBAChB,QAAC,YAAY;MAAA;MAAA;MAAA;IAAA;EAAG;IAAA;IAAA;IAAA;EAAA,QACE;AAExB;AAAC,MANQA,gBAAgB;AAQzB,eAAeA,gBAAgB;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module"}