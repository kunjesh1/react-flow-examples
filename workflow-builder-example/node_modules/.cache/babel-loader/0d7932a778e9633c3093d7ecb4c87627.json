{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useReactFlow } from 'reactflow';\nimport { uuid, randomLabel } from '../utils';\n\n// this hook implements the logic for clicking the button on a workflow edge\n// on edge click: create a node in between the two nodes that are connected by the edge\nfunction useEdgeClick(id) {\n  _s();\n  const {\n    setEdges,\n    setNodes,\n    getNode,\n    getEdge\n  } = useReactFlow();\n  const handleEdgeClick = () => {\n    // first we retrieve the edge object to get the source and target id\n    const edge = getEdge(id);\n    if (!edge) {\n      return;\n    }\n\n    // we retrieve the target node to get its position\n    const targetNode = getNode(edge.target);\n    if (!targetNode) {\n      return;\n    }\n\n    // create a unique id for newly added elements\n    const insertNodeId = uuid();\n\n    // this is the node object that will be added in between source and target node\n    const insertNode = {\n      id: insertNodeId,\n      // we place the node at the current position of the target (prevents jumping)\n      position: {\n        x: targetNode.position.x,\n        y: targetNode.position.y\n      },\n      data: {\n        label: randomLabel()\n      },\n      type: 'workflow'\n    };\n\n    // new connection from source to new node\n    const sourceEdge = {\n      id: `${edge.source}->${insertNodeId}`,\n      source: edge.source,\n      target: insertNodeId,\n      type: 'workflow'\n    };\n\n    // new connection from new node to target\n    const targetEdge = {\n      id: `${insertNodeId}->${edge.target}`,\n      source: insertNodeId,\n      target: edge.target,\n      type: 'workflow'\n    };\n\n    // remove the edge that was clicked as we have a new connection with a node inbetween\n    setEdges(edges => edges.filter(e => e.id !== id).concat([sourceEdge, targetEdge]));\n\n    // insert the node between the source and target node in the react flow state\n    setNodes(nodes => {\n      const targetNodeIndex = nodes.findIndex(node => node.id === edge.target);\n      return [...nodes.slice(0, targetNodeIndex), insertNode, ...nodes.slice(targetNodeIndex, nodes.length)];\n    });\n  };\n  return handleEdgeClick;\n}\n_s(useEdgeClick, \"dAHNQBmY/0THOIKkC+GoQYjfjyU=\", false, function () {\n  return [useReactFlow];\n});\nexport default useEdgeClick;","map":{"version":3,"names":["useReactFlow","uuid","randomLabel","useEdgeClick","id","setEdges","setNodes","getNode","getEdge","handleEdgeClick","edge","targetNode","target","insertNodeId","insertNode","position","x","y","data","label","type","sourceEdge","source","targetEdge","edges","filter","e","concat","nodes","targetNodeIndex","findIndex","node","slice","length"],"sources":["/Users/kunjeshkumar/Downloads/workflow-builder-example/src/hooks/useEdgeClick.ts"],"sourcesContent":["import { EdgeProps, useReactFlow } from 'reactflow';\n\nimport { uuid, randomLabel } from '../utils';\n\n// this hook implements the logic for clicking the button on a workflow edge\n// on edge click: create a node in between the two nodes that are connected by the edge\nfunction useEdgeClick(id: EdgeProps['id']) {\n  const { setEdges, setNodes, getNode, getEdge } = useReactFlow();\n\n  const handleEdgeClick = () => {\n    // first we retrieve the edge object to get the source and target id\n    const edge = getEdge(id);\n\n    if (!edge) {\n      return;\n    }\n\n    // we retrieve the target node to get its position\n    const targetNode = getNode(edge.target);\n\n    if (!targetNode) {\n      return;\n    }\n\n    // create a unique id for newly added elements\n    const insertNodeId = uuid();\n\n    // this is the node object that will be added in between source and target node\n    const insertNode = {\n      id: insertNodeId,\n      // we place the node at the current position of the target (prevents jumping)\n      position: { x: targetNode.position.x, y: targetNode.position.y },\n      data: { label: randomLabel() },\n      type: 'workflow',\n    };\n\n    // new connection from source to new node\n    const sourceEdge = {\n      id: `${edge.source}->${insertNodeId}`,\n      source: edge.source,\n      target: insertNodeId,\n      type: 'workflow',\n    };\n\n    // new connection from new node to target\n    const targetEdge = {\n      id: `${insertNodeId}->${edge.target}`,\n      source: insertNodeId,\n      target: edge.target,\n      type: 'workflow',\n    };\n\n    // remove the edge that was clicked as we have a new connection with a node inbetween\n    setEdges((edges) => edges.filter((e) => e.id !== id).concat([sourceEdge, targetEdge]));\n\n    // insert the node between the source and target node in the react flow state\n    setNodes((nodes) => {\n      const targetNodeIndex = nodes.findIndex((node) => node.id === edge.target);\n\n      return [...nodes.slice(0, targetNodeIndex), insertNode, ...nodes.slice(targetNodeIndex, nodes.length)];\n    });\n  };\n\n  return handleEdgeClick;\n}\n\nexport default useEdgeClick;\n"],"mappings":";AAAA,SAAoBA,YAAY,QAAQ,WAAW;AAEnD,SAASC,IAAI,EAAEC,WAAW,QAAQ,UAAU;;AAE5C;AACA;AACA,SAASC,YAAY,CAACC,EAAmB,EAAE;EAAA;EACzC,MAAM;IAAEC,QAAQ;IAAEC,QAAQ;IAAEC,OAAO;IAAEC;EAAQ,CAAC,GAAGR,YAAY,EAAE;EAE/D,MAAMS,eAAe,GAAG,MAAM;IAC5B;IACA,MAAMC,IAAI,GAAGF,OAAO,CAACJ,EAAE,CAAC;IAExB,IAAI,CAACM,IAAI,EAAE;MACT;IACF;;IAEA;IACA,MAAMC,UAAU,GAAGJ,OAAO,CAACG,IAAI,CAACE,MAAM,CAAC;IAEvC,IAAI,CAACD,UAAU,EAAE;MACf;IACF;;IAEA;IACA,MAAME,YAAY,GAAGZ,IAAI,EAAE;;IAE3B;IACA,MAAMa,UAAU,GAAG;MACjBV,EAAE,EAAES,YAAY;MAChB;MACAE,QAAQ,EAAE;QAAEC,CAAC,EAAEL,UAAU,CAACI,QAAQ,CAACC,CAAC;QAAEC,CAAC,EAAEN,UAAU,CAACI,QAAQ,CAACE;MAAE,CAAC;MAChEC,IAAI,EAAE;QAAEC,KAAK,EAAEjB,WAAW;MAAG,CAAC;MAC9BkB,IAAI,EAAE;IACR,CAAC;;IAED;IACA,MAAMC,UAAU,GAAG;MACjBjB,EAAE,EAAG,GAAEM,IAAI,CAACY,MAAO,KAAIT,YAAa,EAAC;MACrCS,MAAM,EAAEZ,IAAI,CAACY,MAAM;MACnBV,MAAM,EAAEC,YAAY;MACpBO,IAAI,EAAE;IACR,CAAC;;IAED;IACA,MAAMG,UAAU,GAAG;MACjBnB,EAAE,EAAG,GAAES,YAAa,KAAIH,IAAI,CAACE,MAAO,EAAC;MACrCU,MAAM,EAAET,YAAY;MACpBD,MAAM,EAAEF,IAAI,CAACE,MAAM;MACnBQ,IAAI,EAAE;IACR,CAAC;;IAED;IACAf,QAAQ,CAAEmB,KAAK,IAAKA,KAAK,CAACC,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACtB,EAAE,KAAKA,EAAE,CAAC,CAACuB,MAAM,CAAC,CAACN,UAAU,EAAEE,UAAU,CAAC,CAAC,CAAC;;IAEtF;IACAjB,QAAQ,CAAEsB,KAAK,IAAK;MAClB,MAAMC,eAAe,GAAGD,KAAK,CAACE,SAAS,CAAEC,IAAI,IAAKA,IAAI,CAAC3B,EAAE,KAAKM,IAAI,CAACE,MAAM,CAAC;MAE1E,OAAO,CAAC,GAAGgB,KAAK,CAACI,KAAK,CAAC,CAAC,EAAEH,eAAe,CAAC,EAAEf,UAAU,EAAE,GAAGc,KAAK,CAACI,KAAK,CAACH,eAAe,EAAED,KAAK,CAACK,MAAM,CAAC,CAAC;IACxG,CAAC,CAAC;EACJ,CAAC;EAED,OAAOxB,eAAe;AACxB;AAAC,GA1DQN,YAAY;EAAA,QAC8BH,YAAY;AAAA;AA2D/D,eAAeG,YAAY"},"metadata":{},"sourceType":"module"}