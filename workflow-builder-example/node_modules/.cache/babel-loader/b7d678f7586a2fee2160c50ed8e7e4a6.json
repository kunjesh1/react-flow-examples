{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useReactFlow } from 'reactflow';\nimport { uuid, randomLabel } from '../utils';\n\n// this hook implements the logic for clicking a placeholder node\n// on placeholder node click: turn the placeholder and connecting edge into a workflow node\nexport function usePlaceholderClick(id) {\n  _s();\n  const {\n    getNode,\n    setNodes,\n    setEdges\n  } = useReactFlow();\n  const onClick = () => {\n    // we need the parent node object for getting its position\n    const parentNode = getNode(id);\n    if (!parentNode) {\n      return;\n    }\n\n    // create a unique id for the placeholder node that will be added as a child of the clicked node\n    const childPlaceholderId = uuid();\n\n    // create a placeholder node that will be added as a child of the clicked node\n    const childPlaceholderNode = {\n      id: childPlaceholderId,\n      // the placeholder is placed at the position of the clicked node\n      // the layout function will animate it to its new position\n      position: {\n        x: parentNode.position.x,\n        y: parentNode.position.y\n      },\n      type: 'placeholder',\n      data: {\n        label: '+'\n      }\n    };\n\n    // we need a connection from the clicked node to the new placeholder\n    const childPlaceholderEdge = {\n      id: `${parentNode.id}=>${childPlaceholderId}`,\n      source: parentNode.id,\n      target: childPlaceholderId,\n      type: 'placeholder'\n    };\n    setNodes(nodes => nodes.map(node => {\n      // here we are changing the type of the clicked node from placeholder to workflow\n      if (node.id === id) {\n        return {\n          ...node,\n          type: 'workflow',\n          data: {\n            label: randomLabel()\n          }\n        };\n      }\n      return node;\n    })\n    // add the new placeholder node\n    .concat([childPlaceholderNode]));\n    setEdges(edges => edges.map(edge => {\n      // here we are changing the type of the connecting edge from placeholder to workflow\n      if (edge.target === id) {\n        return {\n          ...edge,\n          type: 'workflow'\n        };\n      }\n      return edge;\n    })\n    // add the new placeholder edge\n    .concat([childPlaceholderEdge]));\n  };\n  return onClick;\n}\n_s(usePlaceholderClick, \"RXKQnGx8E9T31Yk4bnJOgB+RTNQ=\", false, function () {\n  return [useReactFlow];\n});\nexport default usePlaceholderClick;","map":{"version":3,"names":["useReactFlow","uuid","randomLabel","usePlaceholderClick","id","getNode","setNodes","setEdges","onClick","parentNode","childPlaceholderId","childPlaceholderNode","position","x","y","type","data","label","childPlaceholderEdge","source","target","nodes","map","node","concat","edges","edge"],"sources":["/Users/kunjeshkumar/Downloads/workflow-builder-example/src/hooks/usePlaceholderClick.ts"],"sourcesContent":["import { NodeProps, useReactFlow } from 'reactflow';\n\nimport { uuid, randomLabel } from '../utils';\n\n// this hook implements the logic for clicking a placeholder node\n// on placeholder node click: turn the placeholder and connecting edge into a workflow node\nexport function usePlaceholderClick(id: NodeProps['id']) {\n  const { getNode, setNodes, setEdges } = useReactFlow();\n\n  const onClick = () => {\n    // we need the parent node object for getting its position\n    const parentNode = getNode(id);\n\n    if (!parentNode) {\n      return;\n    }\n\n    // create a unique id for the placeholder node that will be added as a child of the clicked node\n    const childPlaceholderId = uuid();\n\n    // create a placeholder node that will be added as a child of the clicked node\n    const childPlaceholderNode = {\n      id: childPlaceholderId,\n      // the placeholder is placed at the position of the clicked node\n      // the layout function will animate it to its new position\n      position: { x: parentNode.position.x, y: parentNode.position.y },\n      type: 'placeholder',\n      data: { label: '+' },\n    };\n\n    // we need a connection from the clicked node to the new placeholder\n    const childPlaceholderEdge = {\n      id: `${parentNode.id}=>${childPlaceholderId}`,\n      source: parentNode.id,\n      target: childPlaceholderId,\n      type: 'placeholder',\n    };\n\n    setNodes((nodes) =>\n      nodes\n        .map((node) => {\n          // here we are changing the type of the clicked node from placeholder to workflow\n          if (node.id === id) {\n            return {\n              ...node,\n              type: 'workflow',\n              data: { label: randomLabel() },\n            };\n          }\n          return node;\n        })\n        // add the new placeholder node\n        .concat([childPlaceholderNode])\n    );\n\n    setEdges((edges) =>\n      edges\n        .map((edge) => {\n          // here we are changing the type of the connecting edge from placeholder to workflow\n          if (edge.target === id) {\n            return {\n              ...edge,\n              type: 'workflow',\n            };\n          }\n          return edge;\n        })\n        // add the new placeholder edge\n        .concat([childPlaceholderEdge])\n    );\n  };\n\n  return onClick;\n}\n\nexport default usePlaceholderClick;\n"],"mappings":";AAAA,SAAoBA,YAAY,QAAQ,WAAW;AAEnD,SAASC,IAAI,EAAEC,WAAW,QAAQ,UAAU;;AAE5C;AACA;AACA,OAAO,SAASC,mBAAmB,CAACC,EAAmB,EAAE;EAAA;EACvD,MAAM;IAAEC,OAAO;IAAEC,QAAQ;IAAEC;EAAS,CAAC,GAAGP,YAAY,EAAE;EAEtD,MAAMQ,OAAO,GAAG,MAAM;IACpB;IACA,MAAMC,UAAU,GAAGJ,OAAO,CAACD,EAAE,CAAC;IAE9B,IAAI,CAACK,UAAU,EAAE;MACf;IACF;;IAEA;IACA,MAAMC,kBAAkB,GAAGT,IAAI,EAAE;;IAEjC;IACA,MAAMU,oBAAoB,GAAG;MAC3BP,EAAE,EAAEM,kBAAkB;MACtB;MACA;MACAE,QAAQ,EAAE;QAAEC,CAAC,EAAEJ,UAAU,CAACG,QAAQ,CAACC,CAAC;QAAEC,CAAC,EAAEL,UAAU,CAACG,QAAQ,CAACE;MAAE,CAAC;MAChEC,IAAI,EAAE,aAAa;MACnBC,IAAI,EAAE;QAAEC,KAAK,EAAE;MAAI;IACrB,CAAC;;IAED;IACA,MAAMC,oBAAoB,GAAG;MAC3Bd,EAAE,EAAG,GAAEK,UAAU,CAACL,EAAG,KAAIM,kBAAmB,EAAC;MAC7CS,MAAM,EAAEV,UAAU,CAACL,EAAE;MACrBgB,MAAM,EAAEV,kBAAkB;MAC1BK,IAAI,EAAE;IACR,CAAC;IAEDT,QAAQ,CAAEe,KAAK,IACbA,KAAK,CACFC,GAAG,CAAEC,IAAI,IAAK;MACb;MACA,IAAIA,IAAI,CAACnB,EAAE,KAAKA,EAAE,EAAE;QAClB,OAAO;UACL,GAAGmB,IAAI;UACPR,IAAI,EAAE,UAAU;UAChBC,IAAI,EAAE;YAAEC,KAAK,EAAEf,WAAW;UAAG;QAC/B,CAAC;MACH;MACA,OAAOqB,IAAI;IACb,CAAC;IACD;IAAA,CACCC,MAAM,CAAC,CAACb,oBAAoB,CAAC,CAAC,CAClC;IAEDJ,QAAQ,CAAEkB,KAAK,IACbA,KAAK,CACFH,GAAG,CAAEI,IAAI,IAAK;MACb;MACA,IAAIA,IAAI,CAACN,MAAM,KAAKhB,EAAE,EAAE;QACtB,OAAO;UACL,GAAGsB,IAAI;UACPX,IAAI,EAAE;QACR,CAAC;MACH;MACA,OAAOW,IAAI;IACb,CAAC;IACD;IAAA,CACCF,MAAM,CAAC,CAACN,oBAAoB,CAAC,CAAC,CAClC;EACH,CAAC;EAED,OAAOV,OAAO;AAChB;AAAC,GAnEeL,mBAAmB;EAAA,QACOH,YAAY;AAAA;AAoEtD,eAAeG,mBAAmB"},"metadata":{},"sourceType":"module"}